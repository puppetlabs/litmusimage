---
name: template - build and deploy

on:
  workflow_call:
    inputs:
      image:
        default: ""
        type: string
      dockerfile:
        default: ""
        type: string
      refresh:
        type: boolean
        default: false
      push:
        type: boolean
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ vars.DOCKER_REGISTRY != '' && vars.DOCKER_REGISTRY || 'ghcr.io' }}
  REGISTRY_USERNAME: ${{ vars.DOCKER_USERNAME != '' && vars.DOCKER_USERNAME || github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD != '' && secrets.DOCKER_PASSWORD || secrets.GITHUB_TOKEN }}
  REPOSITORY: ${{ vars.DOCKER_REPOSITORY != '' && vars.DOCKER_REPOSITORY || github.repository }}
  image: ${{ github.event.inputs.image }}
  dockerfile: ${{ github.event.inputs.dockerfile }}
  refresh: ${{ github.event.inputs.refresh }}

jobs:
  select:
    name: select
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      push: ${{ steps.branch-names.outputs.is_default }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Create matrix from json
        id: set-matrix
        run: |
          python .github/scripts/set_matrix.py

      - if: inputs.push
        name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8

  images:
    needs: select
    name: image (${{ matrix.image_tag }})
    timeout-minutes: 5
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix: ${{fromJson(needs.select.outputs.matrix)}}
    steps:
      - if: needs.select.outputs.push == 'true'
        name: Login to ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set variables
        run: |
          echo "IMAGE_TAG=${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.image_tag }}" >> $GITHUB_ENV
          echo "PULL_IMAGE=${{ matrix.base_image_tag }}" >> $GITHUB_ENV

      - name: Pull image ${{ matrix.base_image_tag }}
        run: |
          docker image pull ${PULL_IMAGE}
          echo "BASE_ID=$(docker images -q ${PULL_IMAGE})" >> $GITHUB_ENV

      - if: matrix.refresh == false
        name: Pull and compare image ${{ matrix.image_tag }}
        id: compare_image
        run: |
          if docker pull $IMAGE_TAG ; then
            IMAGE_BASE_ID=$(docker inspect ${IMAGE_TAG} --format "{{ index .Config.Labels \"base_image\"}}" || true)
            if [[ "${IMAGE_BASE_ID}" == "${BASE_ID}" ]] ; then
              echo "no updates to base image since last build, aborting"
              exit 0
            fi
            echo "::notice title=::rebuilding, base image_id does not match"
          else
            echo "::notice title=::building, image not found in registry"
          fi
          echo "need_refresh=true" >> $GITHUB_OUTPUT

      - if: steps.compare_image.outputs.need_refresh || steps.compare_image.outcome == 'skipped'
        name: Checkout repository
        id: checkout_repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - if: steps.checkout_repo.conclusion == 'success'
        name: Build ${{ matrix.image_tag }}
        id: build_image
        run: |
          docker build --rm --no-cache -t ${IMAGE_TAG} . --label "base_image=${BASE_ID}" -f ${{ matrix.dockerfile }}.dockerfile --build-arg BASE_IMAGE_TAG=${{ matrix.base_tag }} --build-arg OS_TYPE=${{ matrix.base_image }}

      - if: steps.build_image.conclusion == 'success'  && needs.select.outputs.push == 'true'
        name: Push ${{ matrix.image_tag }} to ${{ env.REGISTRY }}/${{ env.REPOSITORY }}
        run: |
          docker image push $IMAGE_TAG
