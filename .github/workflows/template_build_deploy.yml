---
name: template - build, test and deploy

on:
  workflow_call:
    inputs:
      image:
        default: ""
        type: string
      dockerfile:
        default: ""
        type: string
      refresh:
        type: boolean
        default: false
      push:
        type: boolean
        default: true
      provision_task:
        default: "docker"
        type: string
      puppet_litmus:
        default: ""
        type: string
      provision_module:
        default: ""
        type: string
      acceptance_test:
        default: ""
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ vars.DOCKER_REGISTRY != '' && vars.DOCKER_REGISTRY || 'ghcr.io' }}
  REGISTRY_USERNAME: ${{ vars.DOCKER_USERNAME != '' && vars.DOCKER_USERNAME || github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD != '' && secrets.DOCKER_PASSWORD || secrets.GITHUB_TOKEN }}
  REPOSITORY: ${{ vars.DOCKER_REPOSITORY != '' && vars.DOCKER_REPOSITORY || github.repository }}
  BOLT_GEM: 1
  GEM_PUPPET_LITMUS: ${{ inputs.puppet_litmus }}

jobs:
  select:
    name: select
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      push: ${{ steps.branch-names.outputs.is_default }}
    steps:
      - name: Validate inputs
        shell: ruby {0}
        run: |
          require 'json'
          def valid_json?(data)
            !!(JSON.parse(data) || true) rescue false
          end
          inputs = JSON.parse('${{ toJSON(inputs) }}')
          inputs.select! do |key, val|
            next if val.nil? || val.to_s.empty?
            case key
            when %r{puppet_litmus|provision_module}
              !valid_json?(val) || val.match?(%r{[();]})
            when 'provision_task'
              !/^docker(_exp)?$/.match?(val)
            end
          end
          inputs.each do |key, value|
            puts "::error title=#{key} invalid::#{value}"
          end
          exit 1 unless inputs.empty?

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Create matrix from json
        id: set-matrix
        shell: python {0}
        run: |
          import json
          import os
          from re import match
          
          # parse workflow inputs
          image = "${{ inputs.image }}"
          dockerfile = "${{ inputs.dockerfile }}"
          refresh = True if "${{ inputs.refresh }}" == "true" else False
          
          # output
          matrix = []
          
          # load matrix json
          with open('images.json') as fd:
              builds = json.load(fd)
              for i, v in enumerate(builds):
                  builds[i]['image_tag'] = f"{v['image']}:{v['tag']}"
                  builds[i]['base_image_tag'] = f"{v['base_image']}:{v['base_tag']}"
                  builds[i]['platforms'] = ",".join(["linux/" + v for v in v['platforms']])
                  builds[i]['refresh'] = refresh
          
          if dockerfile:
              dockerfile = f"^{dockerfile}$"
              for _, v in enumerate(builds):
                  if match(dockerfile, v['dockerfile']):
                      # always refresh
                      v['refresh'] = True
                      matrix.append(v)
          
          if image:
              image = f"^{image}$" if image else image
              for _, v in enumerate(builds):
                  if match(image, v['image_tag']):
                      matrix.append(v)
          
          # unique list of images
          matrix = list({v['image_tag']:v for v in matrix}.values())

          if len(matrix) == 0:
              print("::error title::failed to build matrix, no images matched?")
              raise SystemExit(1)

          with open(os.environ['GITHUB_OUTPUT'], 'a') as output:
              print('matrix=' + json.dumps({ 'include': matrix }), file=output)

      - if: inputs.push
        name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8

  images:
    needs: select
    name: image (${{ matrix.image_tag }})
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix: ${{fromJson(needs.select.outputs.matrix)}}
    steps:
      - if: needs.select.outputs.push == 'true'
        name: Login to ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set variables
        run: |
          echo "IMAGE_TAG=${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.image_tag }}" >> $GITHUB_ENV
          echo "PULL_IMAGE=${{ matrix.base_image_tag }}" >> $GITHUB_ENV

      - name: Pull image ${{ matrix.base_image_tag }}
        run: |
          docker image pull ${PULL_IMAGE}
          echo "BASE_ID=$(docker images -q ${PULL_IMAGE})" >> $GITHUB_ENV

      - if: matrix.refresh == false
        name: Pull and compare image ${{ matrix.image_tag }}
        id: compare_image
        run: |
          if docker pull $IMAGE_TAG ; then
            IMAGE_BASE_ID=$(docker inspect ${IMAGE_TAG} --format "{{ index .Config.Labels \"base_image\"}}" || true)
            if [[ "${IMAGE_BASE_ID}" == "${BASE_ID}" ]] ; then
              echo "no updates to base image since last build, aborting"
              exit 0
            fi
            echo "::notice title=::rebuilding, base image_id does not match"
          else
            echo "::notice title=::building, image not found in registry"
          fi
          echo "need_refresh=true" >> $GITHUB_OUTPUT

      - name: Checkout repository
        id: checkout_repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - if: steps.compare_image.outputs.need_refresh || steps.compare_image.outcome == 'skipped'
        # This step is currently needed to work-around a bug in multi-platform docker buildx
        # https://github.com/docker/buildx/issues/59
        name: Setup Containerd image store
        uses: crazy-max/ghaction-setup-docker@v2
        with:
          version: v24.0.6
          daemon-config: '{ "features": { "containerd-snapshotter": true } }'

      - if: steps.compare_image.outputs.need_refresh || steps.compare_image.outcome == 'skipped'
        name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - if: steps.compare_image.outputs.need_refresh || steps.compare_image.outcome == 'skipped'
        name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - if: steps.compare_image.outputs.need_refresh || steps.compare_image.outcome == 'skipped'
        name: Build ${{ matrix.image_tag }}
        id: build_image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}.dockerfile
          labels: base_image=${{ env.BASE_ID }}
          load: true
          push: false
          provenance: ${{ contains(env.REGISTRY, 'docker') }}
          tags: ${{ env.IMAGE_TAG }}
          platforms: ${{ matrix.platforms }}
          build-args: |
            BASE_IMAGE_TAG=${{ matrix.base_tag }}
            OS_TYPE=${{ matrix.base_image }}

      - name: Smoke test (${{ inputs.provision_task }})
        uses: ./.github/actions/smoke-test
        with:
          docker_image: ${{ env.IMAGE_TAG }}
          provision_task: ${{ inputs.provision_task }}
          provision_module: ${{ inputs.provision_module }}

      - name: Acceptance test (${{ inputs.provision_task }})
        if: ${{ inputs.acceptance.test != 'false' && inputs.acceptance_test != '' }}
        uses: ./.github/actions/acceptance-test
        with:
          docker_image: ${{ env.IMAGE_TAG }}
          repo: ${{ inputs.acceptance_test }}
          provision_task: ${{ inputs.provision_task }}
          provision_module: ${{ inputs.provision_module }}

      - if: steps.build_image.outcome == 'success' && needs.select.outputs.push == 'true'
        name: Push ${{ matrix.image_tag }} to ${{ env.REGISTRY }}/${{ env.REPOSITORY }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}.dockerfile
          labels: base_image=${{ env.BASE_ID }}
          push: true
          tags: ${{ env.IMAGE_TAG }}
          provenance: ${{ contains(env.REGISTRY, 'docker') }}
          platforms: ${{ matrix.platforms }}
          build-args: |
            BASE_IMAGE_TAG=${{ matrix.base_tag }}
            OS_TYPE=${{ matrix.base_image }}
